{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"L14_Logistic_Regression.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM9FotZXnS5bx5DGkufzQRr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Fy2_q1yA_eY2"},"source":["# Logistic Regression\n"," "]},{"cell_type":"markdown","metadata":{"id":"kFWSw3mPzCd3"},"source":["### Imports"]},{"cell_type":"code","metadata":{"id":"ePyjL-fEA4As","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634177875939,"user_tz":-540,"elapsed":26711,"user":{"displayName":"Ki-Baek Lee","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00357310680332321506"}},"outputId":"749bd658-d61a-4ab6-ca19-6cd9a28549f8"},"source":["import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as func\n","import torch.optim as opt\n","\n","#from google.colab import drive\n","#drive.mount('/content/drive')\n","\n","# Seed 고정\n","torch.manual_seed(1)"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f375ac5eb70>"]},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"SH2RX5pEBB0H"},"source":["### 1 Data loading\n","| $x_1$ | $x_2$ | $y$ |\n","|---|---|---|\n","| 1 | 2 | 0 |\n","| 2 | 3 | 0 |\n","| 3 | 1 | 0 |\n","| 4 | 3 | 1 |\n","| 5 | 3 | 1 |\n","| 6 | 2 | 1 |\n"]},{"cell_type":"code","metadata":{"id":"HL2ZwVjWBCw7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634177908135,"user_tz":-540,"elapsed":242,"user":{"displayName":"Ki-Baek Lee","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00357310680332321506"}},"outputId":"733f8ced-8514-41be-f89b-e68d88f070d9"},"source":["# Data 수동으로 입력하기\n","x_train = torch.FloatTensor([[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]])\n","y_train = torch.FloatTensor([[0], [0], [0], [1], [1], [1]])\n","\n","print(x_train)\n","print(x_train.shape)\n","print(y_train)\n","print(y_train.shape)\n","\n","# Model 설계\n","class Logistic(nn.Module):\n","    def __init__(self, num_inputs, num_outputs):\n","        super().__init__()\n","        self.linear = nn.Linear(num_inputs, num_outputs)\n","        self.sigmoid = nn.Sigmoid()\n","\n","    def forward(self, x):\n","        return self.sigmoid(self.linear(x))\n","\n","# Model 초기화 (입력 dim, 출력 dim)\n","model = Logistic(2, 1)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 2.],\n","        [2., 3.],\n","        [3., 1.],\n","        [4., 3.],\n","        [5., 3.],\n","        [6., 2.]])\n","torch.Size([6, 2])\n","tensor([[0.],\n","        [0.],\n","        [0.],\n","        [1.],\n","        [1.],\n","        [1.]])\n","torch.Size([6, 1])\n"]}]},{"cell_type":"markdown","metadata":{"id":"bfef_frYE6yz"},"source":["### 2 Hypothesis, Cost and Optimization\n","* 다음 수식을 만족한다고 가정한다\n","  + Input이 1개(Scalar)인 경우\n","$$ y_{hypo} = H(x) = \\frac{1}{1+e^{-\\alpha x}} $$\n","  + Input이 여러개(Vector)인 경우\n","$$ y_{hypo} = H(X) = \\frac{1}{1+e^{-W^TX}} $$\n","\n","* ex) data가 3개인 경우,\n","  $$ y =  \\frac{1}{1 + e^{-\\begin{bmatrix} w_1 && w_2 && w_3 \\end{bmatrix} \\cdot \\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix}}} $$\n","  + 이를 만족하는 $W$ 를 구해야 한다 \n","* Cost function으로 Binary Cross Entropy를 이용한다\n","$$ -[y_{train}log(y_{hypo}) + (1-y_{train})log(1-y_{hypo})] $$"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m_NA4ix0HdJw","executionInfo":{"status":"ok","timestamp":1634177911791,"user_tz":-540,"elapsed":338,"user":{"displayName":"Ki-Baek Lee","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00357310680332321506"}},"outputId":"ae18558a-8c13-4051-ba85-3586f63d0f1e"},"source":["# Optimizer 설정 (learning rate = 1로 설정)\n","optimizer = opt.SGD(model.parameters(), lr=1)\n","\n","# 반복\n","for epoch in range(100):\n","\n","  # Cost 계산 / mse_loss(가정에의한값, 참값)\n","  y_hypo = model(x_train)\n","  cost = func.binary_cross_entropy(y_hypo, y_train)\n","\n","  # cost를 이용해 model update\n","  optimizer.zero_grad()\n","  cost.backward()\n","  optimizer.step()\n","\n","  # 10번 마다 중간결과 출력\n","  if epoch % 10 == 9:\n","    prediction = y_hypo >= torch.FloatTensor([0.5])\n","    correct_prediction = prediction.float() == y_train\n","    accuracy = correct_prediction.sum().item() / len(correct_prediction)\n","    print('Epoch {:4d}/{} Cost: {:.6f} Accuracy {:2.2f}%'.format(\n","            epoch, 100, cost.item(), accuracy * 100,\n","    ))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch    9/100 Cost: 0.579565 Accuracy 50.00%\n","Epoch   19/100 Cost: 0.497444 Accuracy 66.67%\n","Epoch   29/100 Cost: 0.420540 Accuracy 66.67%\n","Epoch   39/100 Cost: 0.356995 Accuracy 83.33%\n","Epoch   49/100 Cost: 0.302327 Accuracy 83.33%\n","Epoch   59/100 Cost: 0.253374 Accuracy 83.33%\n","Epoch   69/100 Cost: 0.209217 Accuracy 100.00%\n","Epoch   79/100 Cost: 0.173890 Accuracy 100.00%\n","Epoch   89/100 Cost: 0.153032 Accuracy 100.00%\n","Epoch   99/100 Cost: 0.141287 Accuracy 100.00%\n"]}]},{"cell_type":"markdown","metadata":{"id":"hc6TPzluWB1M"},"source":["### 3 Assignment\n","* Data 파일을 이용한 Logistic Regression\n","  - data_logistic_regression.csv을 이용해 학습한다\n","    + 8개의 input, 1개의 output\n","$$ [x_1, ... x_8, y] $$\n","  - Accuracy 75% 이상을 달성한다"]}]}